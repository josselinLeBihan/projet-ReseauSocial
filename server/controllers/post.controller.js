const Post = require("../models/post.model")
const mongoose = require("mongoose")
const logger = require("../utils/logger")
const dayjs = require("dayjs")
const relativeTime = require("dayjs/plugin/relativeTime")

dayjs.extend(relativeTime)

/**
 * Cr√©e un post
 *
 * @route POST /post/
 */
exports.createPost = async (req, res, next) => {
  try {
    const { content, user, fileUrl, fileType, community } = req.body

    if (!content || !user) {
      logger.warn("‚ö†Ô∏è Champs manquants lors de la cr√©ation du post.")
      return res.status(400).json({ error: "Tous les champs sont requis." })
    }

    // TODO : V√©rifier si l'utilisateur existe (par exemple avec un User.findById)

    const _id = new mongoose.Types.ObjectId()

    const post = new Post({
      _id,
      content,
      user,
      fileUrl,
      fileType,
      community,
      createAt: new Date(),
    })

    await post.save()
    logger.info(
      `‚úÖ Post cr√©√© avec succ√®s : ID ${_id} par l'utilisateur ${user}`
    )
    res.status(201).json({ message: "Post cr√©√© !" })
  } catch (error) {
    logger.error(`‚ùå Erreur lors de la cr√©ation du post : ${error.message}`)
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * R√©cup√®re les posts d'une communaut√©
 *
 * @route GET /community/:communityId
 */
exports.getCommunityPosts = async (req, res, next) => {
  try {
    const { communityId } = req.params
    const { limit = 10, skip = 0 } = req.query

    logger.info(
      `üîç Tentative de r√©cup√©ration des posts pour la communaut√© : ${communityId}`
    )
    const posts = await Post.find({ community: communityId })
      .sort({
        createdAt: -1,
      })
      .populate("user", "name userName")
      .populate("community", "name")
      .skip(parseInt(skip))
      .limit(parseInt(limit))
      .lean()

    const formattedPosts = posts.map((post) => ({
      ...post,
      createdAt: dayjs(post.createdAt).fromNow(),
    }))

    const totalCommunityPosts = await Post.countDocuments({
      community: communityId,
    })

    logger.info(`‚úÖ Posts r√©cup√©r√©s pour la communaut√© : ${communityId}`)
    logger.debug(`üî¢ Nombre total de posts : ${totalCommunityPosts}`)
    res
      .status(200)
      .json({ posts: formattedPosts, totalCommunityPosts: totalCommunityPosts })
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la r√©cup√©ration des posts pour la communaut√© (${req.params.communityId}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Modifie un post
 *
 * @route POST /modify/:id
 */
exports.modifyPost = async (req, res, next) => {
  try {
    const { content, fileUrl, fileType } = req.body
    const { id } = req.params

    logger.info(`üîß Tentative de modification du post : ID ${id}`)
    const result = await Post.updateOne(
      { _id: id },
      { content, fileUrl, fileType }
    )

    if (result.nModified === 0) {
      logger.warn(`‚ö†Ô∏è Aucun changement d√©tect√© pour le post : ID ${id}`)
      return res.status(400).json({ message: "Aucune modification appliqu√©e." })
    }

    logger.info(`‚úÖ Post modifi√© avec succ√®s : ID ${id}`)
    res.status(200).json({ message: "Post modifi√© !" })
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la modification du post (ID ${req.params.id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Supprime un post
 *
 * @route POST /delete/:id
 */
exports.deletePost = async (req, res, next) => {
  try {
    const { id } = req.params

    logger.info(`üóëÔ∏è Tentative de suppression du post : ID ${id}`)
    const result = await Post.deleteOne({ _id: id })

    if (result.deletedCount === 0) {
      logger.warn(`‚ö†Ô∏è Aucun post trouv√© pour suppression : ID ${id}`)
      return res.status(404).json({ message: "Post non trouv√©." })
    }

    logger.info(`‚úÖ Post supprim√© avec succ√®s : ID ${id}`)
    res.status(200).json({ message: "Post supprim√© !" })
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la suppression du post (ID ${req.params.id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * R√©cup√®re un post
 *
 * @route GET /post/:id
 */
exports.getPost = async (req, res, next) => {
  try {
    const { id } = req.params

    logger.info(`üîç Tentative de r√©cup√©ration du post : ID ${id}`)
    const post = await Post.findOne({ _id: id }).populate("user")

    if (!post) {
      logger.warn(`‚ö†Ô∏è Post non trouv√© : ID ${id}`)
      return res.status(404).json({ error: "Post non trouv√©." })
    }

    logger.info(`‚úÖ Post r√©cup√©r√© avec succ√®s : ID ${id}`)
    res.status(200).json(post)
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la r√©cup√©ration du post (ID ${req.params.id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}
