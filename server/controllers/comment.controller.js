const Comment = require("../models/Comment.model")
const Post = require("../models/post.model")
const mongoose = require("mongoose")
const User = require("../models/user.model")
const logger = require("../utils/logger")
const dayjs = require("dayjs")
const relativeTime = require("dayjs/plugin/relativeTime")

dayjs.extend(relativeTime)
dayjs.locale("fr")

/**
 * R√©cup√®re les donn√©es d'un commentaire
 *
 * @Route GET /comment/:id
 */
exports.getComment = async (req, res, next) => {
  try {
    const { id } = req.params
    logger.info(`üîç Tentative de r√©cup√©ration du commentaire avec l'ID : ${id}`)

    const commentData = await Comment.findOne({ _id: id })
    if (!commentData) {
      logger.warn(`‚ö†Ô∏è Aucun commentaire trouv√© avec l'ID : ${id}`)
      return res.status(404).json({ error: "Commentaire non trouv√©." })
    }

    const user = await User.findById(commentData.user)
    if (!user) {
      logger.warn(
        `‚ö†Ô∏è Utilisateur associ√© non trouv√© pour le commentaire ID : ${id}`
      )
      return res.status(404).json({ error: "Utilisateur non trouv√©." })
    }

    const comment = {
      _id: commentData._id,
      createdAt: dayjs(commentData.createdAt).fromNow(),
      modifiedAt:
        commentData.modifiedAt && dayjs(commentData.modifiedAt).fromNow(),
      comments: commentData.comments,
      content: commentData.content,
      user: {
        _id: user._id,
        name: user.name,
        userName: user.userName,
      },
    }

    logger.info(`‚úÖ Commentaire r√©cup√©r√© avec succ√®s : ID ${id}`)
    res.status(200).json(comment)
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la r√©cup√©ration du commentaire (ID : ${req.params.id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Cr√©e un commentaire
 *
 * @Route POST /comment/
 */
exports.addComment = async (req, res, next) => {
  try {
    const _id = new mongoose.Types.ObjectId()
    const { parentId, parentType, user, content } = req.body

    logger.info("üîß Tentative de cr√©ation d'un nouveau commentaire.")

    if (!parentId || !parentType || !user || !content) {
      logger.warn("‚ö†Ô∏è Champs manquants pour la cr√©ation du commentaire.")
      return res.status(400).json({ error: "Tous les champs sont requis." })
    }

    const comment = new Comment({
      _id,
      user,
      content,
      createdAt: new Date(),
    })

    await comment.save()
    logger.info(
      `‚úÖ Nouveau commentaire cr√©√© : ID ${_id}, par l'utilisateur : ${user}`
    )

    const updateQuery = { $push: { comments: { $each: [_id], $position: 0 } } }

    if (parentType === "comment") {
      await Comment.updateOne({ _id: parentId }, updateQuery)
      logger.info(
        `üîó Commentaire enfant li√© √† un autre commentaire (Parent ID : ${parentId})`
      )
    } else if (parentType === "post") {
      await Post.updateOne({ _id: parentId }, updateQuery)
      logger.info(
        `üîó Commentaire enfant li√© √† un post (Parent ID : ${parentId})`
      )
    } else {
      logger.warn(`‚ö†Ô∏è Type de parent invalide : ${parentType}`)
      return res.status(400).json({ error: "Champs parentType invalide." })
    }

    res.status(201).json({ message: "Comment added!" })
    logger.info(`‚úÖ Commentaire ajout√© avec succ√®s : ID ${_id}`)
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la cr√©ation du commentaire : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Modifie un commentaire
 *
 * @route POST /modify/:id
 */
exports.modifyComment = async (req, res, next) => {
  try {
    const { comment } = req.body
    const { id } = req.params

    const content = comment.content

    logger.info(
      `üîß Tentative de modification du commentaire : ID ${id} Modification ${content}`
    )

    const modifiedAt = new Date()

    const result = await Comment.updateOne({ _id: id }, { content, modifiedAt })

    if (result.nModified === 0) {
      logger.warn(`‚ö†Ô∏è Aucun changement d√©tect√© pour le commentaire : ID ${id}`)
      return res.status(400).json({ message: "Aucune modification appliqu√©e." })
    }

    logger.info(`‚úÖ Commentaire modifi√© avec succ√®s : ID ${id}`)
    res.status(200).json({ message: "Commentaire modifi√© !" })
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la modification du Commentaire (ID ${req.params.id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Supprime un Commentaire
 *
 * @route POST /delete/:id
 */
exports.deleteComment = async (req, res, next) => {
  try {
    const { parentId, parentType, _id } = req.body

    if (!parentId || !_id) {
      logger.warn("‚ö†Ô∏è Champs manquants pour la suppression du commentaire.")
      return res.status(400).json({ error: "Tous les champs sont requis." })
    }

    logger.info(`üóëÔ∏è Tentative de suppression du commentaire : ID ${_id}`)

    if (parentType === "comment") {
      await Comment.updateOne({ _id: parentId }, { $pull: { comments: _id } })
      logger.info(
        `üîó Suppr√©ssion de la liaison avec le parent. (Parent ID : ${parentId})`
      )
    } else if (parentType === "post") {
      await Post.updateOne({ _id: parentId }, { $pull: { comments: _id } })
      logger.info(
        `üîó Suppr√©ssion de la liaison avec le parent. (Parent ID : ${parentId})`
      )
    } else {
      logger.warn(`‚ö†Ô∏è Type de parent invalide : ${parentType}`)
      return res.status(400).json({ error: "Champs parentType invalide." })
    }

    const result = await Comment.deleteOne({ _id: _id })

    if (result.deletedCount === 0) {
      logger.warn(`‚ö†Ô∏è Aucun commentaire trouv√© pour suppression : ID ${_id}`)
      return res.status(404).json({ message: "Commentaire non trouv√©." })
    }

    logger.info(`‚úÖ Commentaire supprim√© avec succ√®s : ID ${_id}`)
    res.status(200).json({ message: "Commentaire supprim√© !" })
  } catch (error) {
    logger.error(
      `‚ùå Erreur lors de la suppression du commentaire (ID ${req.params._id}) : ${error.message}`
    )
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Unlike un post
 *
 * @route POST /unlike/:id/:userId
 */
exports.unlikeComment = async (req, res, next) => {
  try {
    const { commentId, userId } = req.params

    if (!commentId || !userId) {
      logger.warn("‚ö†Ô∏è Champs manquants lors du unlike.")
      return res.status(400).json({
        error: `Tous les champs sont requis. Id: ${commentId} UserId: ${userId}`,
      })
    }

    logger.info(
      `üîç Tentative de unlike du comment par un utilisateur: ID ${commentId} User ${userId}`
    )
    const comment = await Comment.findOne({ _id: commentId }).populate("user")
    if (!comment) {
      logger.error("‚ùå Erreur lors de la r√©cup√©ration du comment")
      return res.status(400).json({
        error: `Erreur lors de la r√©ccup√©ration du comment Comment: ${commentId} UserId: ${userId}`,
      })
    }
    const user = await User.findById(userId)
    if (!user) {
      logger.error("‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur")
      return res.status(400).json({
        error: `Erreur lors de la r√©ccup√©ration du comment Comment: ${commentId} UserId: ${userId}`,
      })
    }

    await Comment.updateOne({ _id: commentId }, { $pull: { likes: userId } })
    res.status(200).json({ message: "Comment unlik√© avec succ√®s !" })

    logger.info(`‚úÖ Comment unlik√© avec succ√®s : ID ${commentId}`)
  } catch (error) {
    logger.error(`‚ùå Erreur lors du unlike du comment : ${error.message}`)
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}

/**
 * Like un comment
 *
 * @route POST /like/:id/:userId
 */
exports.likeComment = async (req, res, next) => {
  try {
    const { commentId, userId } = req.params

    if (!commentId || !userId) {
      logger.warn("‚ö†Ô∏è Champs manquants lors de la cr√©ation du comment.")
      return res.status(400).json({
        error: `Tous les champs sont requis. Id: ${commentId} UserId: ${userId}`,
      })
    }

    logger.info(
      `üîç Tentative de like du comment par un utilisateur: ID ${commentId} User ${userId}`
    )
    const comment = await Comment.findOne({ _id: commentId }).populate("user")
    if (!comment) {
      logger.error("‚ùå Erreur lors de la r√©cup√©ration du comment")
      return res.status(400).json({
        error: `Erreur lors de la r√©ccup√©ration du comment Comment: ${commentId} UserId: ${userId}`,
      })
    }
    const user = await User.findById(userId)
    if (!user) {
      logger.error("‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur")
      return res.status(400).json({
        error: `Erreur lors de la r√©ccup√©ration du comment Comment: ${commentId} UserId: ${userId}`,
      })
    }

    await Comment.updateOne({ _id: commentId }, { $push: { likes: userId } })
    res.status(200).json({ message: "Comment lik√© avec succ√®s !" })

    logger.info(`‚úÖ Comment lik√© avec succ√®s : ID ${commentId}`)
  } catch (error) {
    logger.error(`‚ùå Erreur lors du like du comment : ${error.message}`)
    res.status(500).json({ error: "Une erreur est survenue." })
  }
}
